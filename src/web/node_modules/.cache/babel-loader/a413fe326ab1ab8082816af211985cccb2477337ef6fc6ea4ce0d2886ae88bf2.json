{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,Link}from'react-router-dom';import{AppBar,Toolbar,Typography,Container,Box,Tabs,Tab,ThemeProvider,createTheme,CssBaseline}from'@mui/material';import{Science as ScienceIcon,CellTower as CellIcon,NetworkCheck as NetworkIcon,Analytics as AnalyticsIcon}from'@mui/icons-material';import Dashboard from'./components/Dashboard';import ECMExplorer from'./components/ECMExplorer';import CellTypes from'./components/CellTypes';import NetworkView from'./components/NetworkView';import Analytics from'./components/Analytics';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const theme=createTheme({palette:{primary:{main:'#1976d2'},secondary:{main:'#dc004e'}}});function App(){const[currentTab,setCurrentTab]=useState(0);const handleTabChange=(event,newValue)=>{setCurrentTab(newValue);};return/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1},children:[/*#__PURE__*/_jsx(AppBar,{position:\"static\",children:/*#__PURE__*/_jsxs(Toolbar,{children:[/*#__PURE__*/_jsx(ScienceIcon,{sx:{mr:2}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",sx:{flexGrow:1},children:\"Neural ECM Explorer\"})]})}),/*#__PURE__*/_jsxs(Container,{maxWidth:\"xl\",sx:{mt:3},children:[/*#__PURE__*/_jsx(Box,{sx:{borderBottom:1,borderColor:'divider',mb:3},children:/*#__PURE__*/_jsxs(Tabs,{value:currentTab,onChange:handleTabChange,variant:\"scrollable\",scrollButtons:\"auto\",children:[/*#__PURE__*/_jsx(Tab,{icon:/*#__PURE__*/_jsx(AnalyticsIcon,{}),label:\"Dashboard\",component:Link,to:\"/\",onClick:()=>setCurrentTab(0)}),/*#__PURE__*/_jsx(Tab,{icon:/*#__PURE__*/_jsx(ScienceIcon,{}),label:\"ECM Components\",component:Link,to:\"/ecm\",onClick:()=>setCurrentTab(1)}),/*#__PURE__*/_jsx(Tab,{icon:/*#__PURE__*/_jsx(CellIcon,{}),label:\"Cell Types\",component:Link,to:\"/cell-types\",onClick:()=>setCurrentTab(2)}),/*#__PURE__*/_jsx(Tab,{icon:/*#__PURE__*/_jsx(NetworkIcon,{}),label:\"Network View\",component:Link,to:\"/network\",onClick:()=>setCurrentTab(3)})]})}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/ecm\",element:/*#__PURE__*/_jsx(ECMExplorer,{})}),/*#__PURE__*/_jsx(Route,{path:\"/cell-types\",element:/*#__PURE__*/_jsx(CellTypes,{})}),/*#__PURE__*/_jsx(Route,{path:\"/network\",element:/*#__PURE__*/_jsx(NetworkView,{})}),/*#__PURE__*/_jsx(Route,{path:\"/analytics\",element:/*#__PURE__*/_jsx(Analytics,{})})]})]})]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Link","AppBar","Toolbar","Typography","Container","Box","Tabs","Tab","ThemeProvider","createTheme","CssBaseline","Science","ScienceIcon","CellTower","CellIcon","NetworkCheck","NetworkIcon","Analytics","AnalyticsIcon","Dashboard","ECMExplorer","CellTypes","NetworkView","jsx","_jsx","jsxs","_jsxs","theme","palette","primary","main","secondary","App","currentTab","setCurrentTab","handleTabChange","event","newValue","children","sx","flexGrow","position","mr","variant","component","maxWidth","mt","borderBottom","borderColor","mb","value","onChange","scrollButtons","icon","label","to","onClick","path","element"],"sources":["/Users/kevinjoseph/Neural_ECM/src/web/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  Box,\n  Tabs,\n  Tab,\n  ThemeProvider,\n  createTheme,\n  CssBaseline\n} from '@mui/material';\nimport {\n  Science as ScienceIcon,\n  CellTower as CellIcon,\n  NetworkCheck as NetworkIcon,\n  Analytics as AnalyticsIcon\n} from '@mui/icons-material';\n\nimport Dashboard from './components/Dashboard';\nimport ECMExplorer from './components/ECMExplorer';\nimport CellTypes from './components/CellTypes';\nimport NetworkView from './components/NetworkView';\nimport Analytics from './components/Analytics';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n});\n\nfunction App() {\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Box sx={{ flexGrow: 1 }}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <ScienceIcon sx={{ mr: 2 }} />\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                Neural ECM Explorer\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          \n          <Container maxWidth=\"xl\" sx={{ mt: 3 }}>\n            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n              <Tabs \n                value={currentTab} \n                onChange={handleTabChange}\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab \n                  icon={<AnalyticsIcon />} \n                  label=\"Dashboard\" \n                  component={Link} \n                  to=\"/\" \n                  onClick={() => setCurrentTab(0)}\n                />\n                <Tab \n                  icon={<ScienceIcon />} \n                  label=\"ECM Components\" \n                  component={Link} \n                  to=\"/ecm\" \n                  onClick={() => setCurrentTab(1)}\n                />\n                <Tab \n                  icon={<CellIcon />} \n                  label=\"Cell Types\" \n                  component={Link} \n                  to=\"/cell-types\" \n                  onClick={() => setCurrentTab(2)}\n                />\n                <Tab \n                  icon={<NetworkIcon />} \n                  label=\"Network View\" \n                  component={Link} \n                  to=\"/network\" \n                  onClick={() => setCurrentTab(3)}\n                />\n              </Tabs>\n            </Box>\n\n            <Routes>\n              <Route path=\"/\" element={<Dashboard />} />\n              <Route path=\"/ecm\" element={<ECMExplorer />} />\n              <Route path=\"/cell-types\" element={<CellTypes />} />\n              <Route path=\"/network\" element={<NetworkView />} />\n              <Route path=\"/analytics\" element={<Analytics />} />\n            </Routes>\n          </Container>\n        </Box>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}